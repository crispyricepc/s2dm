use crate::{
    matrix::{Matrix2, Matrix2x3, Matrix3x2, Matrix4},
    rvec4, vec4,
};

#[test]
fn row() {
    let matrix = Matrix4::new([
        [1.0, 2.0, 3.0, 4.0],
        [5.0, 6.0, 7.0, 8.0],
        [9.0, 10.0, 11.0, 12.0],
        [13.0, 14.0, 15.0, 16.0],
    ]);
    assert_eq!(matrix.row(0), rvec4!(1.0, 2.0, 3.0, 4.0));
    assert_eq!(matrix.row(1), rvec4!(5.0, 6.0, 7.0, 8.0));
    assert_eq!(matrix.row(2), rvec4!(9.0, 10.0, 11.0, 12.0));
    assert_eq!(matrix.row(3), rvec4!(13.0, 14.0, 15.0, 16.0));
}

#[test]
fn col() {
    let matrix = Matrix4::new([
        [1.0, 2.0, 3.0, 4.0],
        [5.0, 6.0, 7.0, 8.0],
        [9.0, 10.0, 11.0, 12.0],
        [13.0, 14.0, 15.0, 16.0],
    ]);
    assert_eq!(matrix.col(0), vec4!(1.0, 5.0, 9.0, 13.0));
    assert_eq!(matrix.col(1), vec4!(2.0, 6.0, 10.0, 14.0));
    assert_eq!(matrix.col(2), vec4!(3.0, 7.0, 11.0, 15.0));
    assert_eq!(matrix.col(3), vec4!(4.0, 8.0, 12.0, 16.0));
}

#[test]
fn add() {
    let a = Matrix4::new([
        [1.0, 2.0, 3.0, 4.0],
        [5.0, 6.0, 7.0, 8.0],
        [9.0, 10.0, 11.0, 12.0],
        [13.0, 14.0, 15.0, 16.0],
    ]);
    let b = Matrix4::new([
        [17.0, 18.0, 19.0, 20.0],
        [21.0, 22.0, 23.0, 24.0],
        [25.0, 26.0, 27.0, 28.0],
        [29.0, 30.0, 31.0, 32.0],
    ]);

    let c = a + b;

    assert_eq!(
        c,
        Matrix4::new([
            [18.0, 20.0, 22.0, 24.0],
            [26.0, 28.0, 30.0, 32.0],
            [34.0, 36.0, 38.0, 40.0],
            [42.0, 44.0, 46.0, 48.0],
        ])
    );
}

#[test]
fn subtract() {
    let a = Matrix4::new([
        [1.0, 2.0, 3.0, 4.0],
        [5.0, 6.0, 7.0, 8.0],
        [9.0, 10.0, 11.0, 12.0],
        [13.0, 14.0, 15.0, 16.0],
    ]);
    let b = Matrix4::new([
        [17.0, 18.0, 19.0, 20.0],
        [21.0, 22.0, 23.0, 24.0],
        [25.0, 26.0, 27.0, 28.0],
        [29.0, 30.0, 31.0, 32.0],
    ]);

    let c = a - b;

    assert_eq!(c, Matrix4::with(-16.0));
}

#[test]
fn scalar() {
    let a = Matrix4::new([
        [1.0, 2.0, 3.0, 4.0],
        [5.0, 6.0, 7.0, 8.0],
        [9.0, 10.0, 11.0, 12.0],
        [13.0, 14.0, 15.0, 16.0],
    ]);

    let b = 2.0;

    let c = a * b;

    assert_eq!(
        c,
        Matrix4::new([
            [2.0, 4.0, 6.0, 8.0],
            [10.0, 12.0, 14.0, 16.0],
            [18.0, 20.0, 22.0, 24.0],
            [26.0, 28.0, 30.0, 32.0],
        ])
    );
}

#[test]
fn multiply() {
    let a = Matrix2x3::new([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]);
    let b = Matrix3x2::new([[7.0, 8.0], [9.0, 10.0], [11.0, 12.0]]);

    let c = a * b;

    assert_eq!(c, Matrix2::new([[58.0, 64.0], [139.0, 154.0]]));
}
